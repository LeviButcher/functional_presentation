{"expireTime":9007200835429962000,"key":"gatsby-plugin-mdx-entire-payload-d0eba87fd7d63a3bee64657558e55b7e-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import { future } from \"mdx-deck/themes\";\nimport { Box, Heading } from \"rebass\";","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":39,"offset":80},"indent":[1]}},{"type":"export","value":"export const themes = [future];","position":{"start":{"line":4,"column":1,"offset":82},"end":{"line":4,"column":32,"offset":113},"indent":[]}},{"type":"import","value":"import { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { atomDark } from \"react-syntax-highlighter/dist/esm/styles/prism\";","position":{"start":{"line":6,"column":1,"offset":115},"end":{"line":7,"column":75,"offset":260},"indent":[1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Functional Programming","position":{"start":{"line":9,"column":3,"offset":264},"end":{"line":9,"column":25,"offset":286},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":262},"end":{"line":9,"column":25,"offset":286},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"By: Levi Butcher","position":{"start":{"line":11,"column":1,"offset":288},"end":{"line":11,"column":17,"offset":304},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":288},"end":{"line":11,"column":17,"offset":304},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":13,"column":1,"offset":306},"end":{"line":13,"column":4,"offset":309},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"The Evolution of Languages","position":{"start":{"line":15,"column":3,"offset":313},"end":{"line":15,"column":29,"offset":339},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":311},"end":{"line":15,"column":29,"offset":339},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Procedural - the birth of functions","position":{"start":{"line":17,"column":3,"offset":343},"end":{"line":17,"column":38,"offset":378},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":343},"end":{"line":17,"column":38,"offset":378},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":341},"end":{"line":18,"column":1,"offset":379},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Object Oriented - global data is bad, lets group functions and data together","position":{"start":{"line":19,"column":3,"offset":382},"end":{"line":19,"column":79,"offset":458},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":382},"end":{"line":19,"column":79,"offset":458},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":380},"end":{"line":20,"column":1,"offset":459},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Functional - Programming through restrictions, No Mutations, Only Pure Functions","position":{"start":{"line":21,"column":3,"offset":462},"end":{"line":21,"column":83,"offset":542},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":462},"end":{"line":21,"column":83,"offset":542},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":460},"end":{"line":21,"column":83,"offset":542},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":341},"end":{"line":21,"column":83,"offset":542},"indent":[1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":23,"column":1,"offset":544},"end":{"line":23,"column":4,"offset":547},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"The Rules of Functional Programming","position":{"start":{"line":26,"column":5,"offset":554},"end":{"line":26,"column":40,"offset":589},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":550},"end":{"line":26,"column":40,"offset":589},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Only write Pure Functions","position":{"start":{"line":28,"column":4,"offset":594},"end":{"line":28,"column":29,"offset":619},"indent":[]}}],"position":{"start":{"line":28,"column":4,"offset":594},"end":{"line":28,"column":29,"offset":619},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":591},"end":{"line":28,"column":29,"offset":619},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":591},"end":{"line":28,"column":29,"offset":619},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":30,"column":1,"offset":621},"end":{"line":30,"column":4,"offset":624},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Pure Function","position":{"start":{"line":32,"column":3,"offset":628},"end":{"line":32,"column":16,"offset":641},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":626},"end":{"line":32,"column":16,"offset":641},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A Pure Function is a function that given the same input, you will always get the same output without Side Effects","position":{"start":{"line":34,"column":1,"offset":643},"end":{"line":34,"column":114,"offset":756},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":643},"end":{"line":34,"column":114,"offset":756},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"f(5) -> 10","position":{"start":{"line":36,"column":1,"offset":758},"end":{"line":36,"column":11,"offset":768},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":758},"end":{"line":36,"column":11,"offset":768},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"f(6) -> 12","position":{"start":{"line":38,"column":1,"offset":770},"end":{"line":38,"column":11,"offset":780},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":770},"end":{"line":38,"column":11,"offset":780},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"f(5) -> 5 Violating Pure Functions","position":{"start":{"line":40,"column":1,"offset":782},"end":{"line":40,"column":35,"offset":816},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":782},"end":{"line":40,"column":35,"offset":816},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":42,"column":1,"offset":818},"end":{"line":42,"column":4,"offset":821},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"A Java Pure Function","position":{"start":{"line":44,"column":3,"offset":825},"end":{"line":44,"column":23,"offset":845},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":823},"end":{"line":44,"column":23,"offset":845},"indent":[]}},{"type":"jsx","value":"<SyntaxHighlighter language=\"java\" style={atomDark}>\n  {`\n  class Calculator {\n    public static int add(int a, int b) {\n        return a + b;\n    }\n  }\n  main() {\n      int result = Calculator.add(5,2);\n      result == 7;\n  }\n  `}\n</SyntaxHighlighter>","position":{"start":{"line":46,"column":1,"offset":847},"end":{"line":58,"column":21,"offset":1099},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":60,"column":1,"offset":1101},"end":{"line":60,"column":4,"offset":1104},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Function Composition","position":{"start":{"line":62,"column":3,"offset":1108},"end":{"line":62,"column":23,"offset":1128},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1106},"end":{"line":62,"column":23,"offset":1128},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can combine functions to make new functions","position":{"start":{"line":64,"column":1,"offset":1130},"end":{"line":64,"column":47,"offset":1176},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":1130},"end":{"line":64,"column":47,"offset":1176},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"f(x) = 5x;\ng(x) = x/5;","position":{"start":{"line":66,"column":1,"offset":1178},"end":{"line":67,"column":12,"offset":1200},"indent":[1]}}],"position":{"start":{"line":66,"column":1,"offset":1178},"end":{"line":67,"column":12,"offset":1200},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"y = f(g) == (x/5) ","position":{"start":{"line":69,"column":1,"offset":1202},"end":{"line":69,"column":19,"offset":1220},"indent":[]}},{"type":"text","value":"*","position":{"start":{"line":69,"column":19,"offset":1220},"end":{"line":69,"column":21,"offset":1222},"indent":[]}},{"type":"text","value":" 5","position":{"start":{"line":69,"column":21,"offset":1222},"end":{"line":69,"column":23,"offset":1224},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":1202},"end":{"line":69,"column":23,"offset":1224},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"result = y(1)","position":{"start":{"line":71,"column":1,"offset":1226},"end":{"line":71,"column":14,"offset":1239},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":1226},"end":{"line":71,"column":14,"offset":1239},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"result == 5","position":{"start":{"line":73,"column":1,"offset":1241},"end":{"line":73,"column":12,"offset":1252},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":1241},"end":{"line":73,"column":12,"offset":1252},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":75,"column":1,"offset":1254},"end":{"line":75,"column":4,"offset":1257},"indent":[]}},{"type":"jsx","value":"<SyntaxHighlighter language=\"java\" style={atomDark}>\n  {`\n    public int divideByFive(int a) {\n        return a / 5;\n    }\n    public int multiplyByFive(int a) {\n        return a * 5;\n    }\n    public Function compose(Func a, Func b) {\n        return (x) -> a(b(x));\n    }\n    var multiplyThenDivide = compose(divideByFive, multipleByFive);\n    multiplyThenDivide()\n  `}\n</SyntaxHighlighter>","position":{"start":{"line":77,"column":1,"offset":1259},"end":{"line":91,"column":21,"offset":1650},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":93,"column":1,"offset":1652},"end":{"line":93,"column":4,"offset":1655},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can do better then that... With the power of Currying","position":{"start":{"line":95,"column":1,"offset":1657},"end":{"line":95,"column":57,"offset":1713},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":1657},"end":{"line":95,"column":57,"offset":1713},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":97,"column":1,"offset":1715},"end":{"line":97,"column":4,"offset":1718},"indent":[]}},{"type":"jsx","value":"<SyntaxHighlighter language=\"java\" style={atomDark}>\n  {`\n    public int divide(int a, int b) {\n        return a / b;\n    }\n    public int multiply(int a, int b) {\n        return a * b;\n    }\n    public Function<T, F> compose(Func<T, F> a, Func<F, T> b) {\n        return (x) -> a(b(x));\n    }\n    var multiplyByFiveThenDivideByFive = compose(divide(5), multiply(5));\n    multiplyByFiveThenDivideByFive(5)\n  `}\n</SyntaxHighlighter>","position":{"start":{"line":99,"column":1,"offset":1720},"end":{"line":113,"column":21,"offset":2150},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":115,"column":1,"offset":2152},"end":{"line":115,"column":4,"offset":2155},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Higher Order Functions","position":{"start":{"line":117,"column":3,"offset":2159},"end":{"line":117,"column":25,"offset":2181},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":2157},"end":{"line":117,"column":25,"offset":2181},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Higer Order Functions - a function that takes in another function as a arguement.","position":{"start":{"line":119,"column":1,"offset":2183},"end":{"line":119,"column":82,"offset":2264},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":2183},"end":{"line":119,"column":82,"offset":2264},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"compose","position":{"start":{"line":121,"column":2,"offset":2267},"end":{"line":121,"column":9,"offset":2274},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":2266},"end":{"line":121,"column":10,"offset":2275},"indent":[]}},{"type":"text","value":" is a examply of a higher order functions","position":{"start":{"line":121,"column":10,"offset":2275},"end":{"line":121,"column":51,"offset":2316},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":2266},"end":{"line":121,"column":51,"offset":2316},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":123,"column":1,"offset":2318},"end":{"line":123,"column":4,"offset":2321},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Higher Order Examples (The Building Blocks of FP)","position":{"start":{"line":125,"column":4,"offset":2326},"end":{"line":125,"column":53,"offset":2375},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":2323},"end":{"line":125,"column":53,"offset":2375},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"map","position":{"start":{"line":127,"column":3,"offset":2379},"end":{"line":127,"column":6,"offset":2382},"indent":[]}}],"position":{"start":{"line":127,"column":3,"offset":2379},"end":{"line":127,"column":6,"offset":2382},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":2377},"end":{"line":127,"column":6,"offset":2382},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"reduce (fold)","position":{"start":{"line":128,"column":3,"offset":2385},"end":{"line":128,"column":16,"offset":2398},"indent":[]}}],"position":{"start":{"line":128,"column":3,"offset":2385},"end":{"line":128,"column":16,"offset":2398},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":2383},"end":{"line":128,"column":16,"offset":2398},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"filter","position":{"start":{"line":129,"column":3,"offset":2401},"end":{"line":129,"column":9,"offset":2407},"indent":[]}}],"position":{"start":{"line":129,"column":3,"offset":2401},"end":{"line":129,"column":9,"offset":2407},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":2399},"end":{"line":129,"column":9,"offset":2407},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":2377},"end":{"line":129,"column":9,"offset":2407},"indent":[1,1]}},{"type":"thematicBreak","position":{"start":{"line":131,"column":1,"offset":2409},"end":{"line":131,"column":4,"offset":2412},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Map","position":{"start":{"line":134,"column":4,"offset":2418},"end":{"line":134,"column":7,"offset":2421},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":2415},"end":{"line":134,"column":7,"offset":2421},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Returns a new list, turning every element inside of list into a type B using the function provided","position":{"start":{"line":136,"column":1,"offset":2423},"end":{"line":136,"column":99,"offset":2521},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":2423},"end":{"line":136,"column":99,"offset":2521},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"// [A] => [B]\nList<B> map(Function<A, B> func, List<A> list);\n\nlistOfStrings = map(a -> a.toString(), listOfInts);","position":{"start":{"line":138,"column":1,"offset":2523},"end":{"line":143,"column":4,"offset":2649},"indent":[1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":145,"column":1,"offset":2651},"end":{"line":145,"column":4,"offset":2654},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Filter","position":{"start":{"line":147,"column":4,"offset":2659},"end":{"line":147,"column":10,"offset":2665},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":2656},"end":{"line":147,"column":10,"offset":2665},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Returns a new list of A, that is a list of all elements that returned true from the passed in function","position":{"start":{"line":149,"column":1,"offset":2667},"end":{"line":149,"column":103,"offset":2769},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":2667},"end":{"line":149,"column":103,"offset":2769},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"// [A] => [A]\nList<A> filter(Function<A, Boolean> func, List<A> list)\n\nonly1s = filter(a -> a == 1, listOfInts);","position":{"start":{"line":151,"column":1,"offset":2771},"end":{"line":156,"column":4,"offset":2895},"indent":[1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":158,"column":1,"offset":2897},"end":{"line":158,"column":4,"offset":2900},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Reduce (also known as fold)","position":{"start":{"line":160,"column":4,"offset":2905},"end":{"line":160,"column":31,"offset":2932},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":2902},"end":{"line":160,"column":31,"offset":2932},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Returns a value,","position":{"start":{"line":161,"column":1,"offset":2933},"end":{"line":161,"column":17,"offset":2949},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":2933},"end":{"line":161,"column":17,"offset":2949},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"// [A] => B\nB reduce(A identityValue, BiFunction<A, B> func, List<A> list)\n\n// This version uses the two first elements of list\nB reduce(BiFunction<A, B, B> func, List<A> list)\n\nsumOfList = listOfInts.reduce(0, a -> a + b, listOfInts)","position":{"start":{"line":163,"column":1,"offset":2951},"end":{"line":171,"column":4,"offset":3197},"indent":[1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":173,"column":1,"offset":3199},"end":{"line":173,"column":31,"offset":3229},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":173,"column":31,"offset":3229}}},"scopeImports":["import { future } from \"mdx-deck/themes\";","import { Box, Heading } from \"rebass\";","import { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";","import { atomDark } from \"react-syntax-highlighter/dist/esm/styles/prism\";","import React from 'react'"],"scopeIdentifiers":["future","Box","Heading","SyntaxHighlighter","atomDark","React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar themes = [future];\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  themes: themes,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Functional Programming\"), mdx(\"p\", null, \"By: Levi Butcher\"), mdx(\"hr\", null), mdx(\"h1\", null, \"The Evolution of Languages\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Procedural - the birth of functions\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Object Oriented - global data is bad, lets group functions and data together\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Functional - Programming through restrictions, No Mutations, Only Pure Functions\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"The Rules of Functional Programming\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Only write Pure Functions\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Pure Function\"), mdx(\"p\", null, \"A Pure Function is a function that given the same input, you will always get the same output without Side Effects\"), mdx(\"p\", null, \"f(5) -> 10\"), mdx(\"p\", null, \"f(6) -> 12\"), mdx(\"p\", null, \"f(5) -> 5 Violating Pure Functions\"), mdx(\"hr\", null), mdx(\"h1\", null, \"A Java Pure Function\"), mdx(SyntaxHighlighter, {\n    language: \"java\",\n    style: atomDark,\n    mdxType: \"SyntaxHighlighter\"\n  }, \"\\n  class Calculator {\\n    public static int add(int a, int b) {\\n        return a + b;\\n    }\\n  }\\n  main() {\\n      int result = Calculator.add(5,2);\\n      result == 7;\\n  }\\n  \"), mdx(\"hr\", null), mdx(\"h1\", null, \"Function Composition\"), mdx(\"p\", null, \"We can combine functions to make new functions\"), mdx(\"p\", null, \"f(x) = 5x;\\ng(x) = x/5;\"), mdx(\"p\", null, \"y = f(g) == (x/5) \", \"*\", \" 5\"), mdx(\"p\", null, \"result = y(1)\"), mdx(\"p\", null, \"result == 5\"), mdx(\"hr\", null), mdx(SyntaxHighlighter, {\n    language: \"java\",\n    style: atomDark,\n    mdxType: \"SyntaxHighlighter\"\n  }, \"\\n    public int divideByFive(int a) {\\n        return a / 5;\\n    }\\n    public int multiplyByFive(int a) {\\n        return a * 5;\\n    }\\n    public Function compose(Func a, Func b) {\\n        return (x) -> a(b(x));\\n    }\\n    var multiplyThenDivide = compose(divideByFive, multipleByFive);\\n    multiplyThenDivide()\\n  \"), mdx(\"hr\", null), mdx(\"p\", null, \"We can do better then that... With the power of Currying\"), mdx(\"hr\", null), mdx(SyntaxHighlighter, {\n    language: \"java\",\n    style: atomDark,\n    mdxType: \"SyntaxHighlighter\"\n  }, \"\\n    public int divide(int a, int b) {\\n        return a / b;\\n    }\\n    public int multiply(int a, int b) {\\n        return a * b;\\n    }\\n    public Function<T, F> compose(Func<T, F> a, Func<F, T> b) {\\n        return (x) -> a(b(x));\\n    }\\n    var multiplyByFiveThenDivideByFive = compose(divide(5), multiply(5));\\n    multiplyByFiveThenDivideByFive(5)\\n  \"), mdx(\"hr\", null), mdx(\"h1\", null, \"Higher Order Functions\"), mdx(\"p\", null, \"Higer Order Functions - a function that takes in another function as a arguement.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"compose\"), \" is a examply of a higher order functions\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Higher Order Examples (The Building Blocks of FP)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"map\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"reduce (fold)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"filter\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Map\"), mdx(\"p\", null, \"Returns a new list, turning every element inside of list into a type B using the function provided\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"// [A] => [B]\\nList<B> map(Function<A, B> func, List<A> list);\\n\\nlistOfStrings = map(a -> a.toString(), listOfInts);\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Filter\"), mdx(\"p\", null, \"Returns a new list of A, that is a list of all elements that returned true from the passed in function\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"// [A] => [A]\\nList<A> filter(Function<A, Boolean> func, List<A> list)\\n\\nonly1s = filter(a -> a == 1, listOfInts);\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Reduce (also known as fold)\"), mdx(\"p\", null, \"Returns a value,\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"// [A] => B\\nB reduce(A identityValue, BiFunction<A, B> func, List<A> list)\\n\\n// This version uses the two first elements of list\\nB reduce(BiFunction<A, B, B> func, List<A> list)\\n\\nsumOfList = listOfInts.reduce(0, a -> a + b, listOfInts)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport { future } from \"mdx-deck/themes\";\nimport { Box, Heading } from \"rebass\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { atomDark } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nexport const themes = [future];\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  themes,\n_frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1>{`Functional Programming`}</h1>\n    <p>{`By: Levi Butcher`}</p>\n    <hr></hr>\n    <h1>{`The Evolution of Languages`}</h1>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Procedural - the birth of functions`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Object Oriented - global data is bad, lets group functions and data together`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Functional - Programming through restrictions, No Mutations, Only Pure Functions`}</p>\n      </li>\n    </ul>\n    <hr></hr>\n    <h3>{`The Rules of Functional Programming`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Only write Pure Functions`}</li>\n    </ol>\n    <hr></hr>\n    <h1>{`Pure Function`}</h1>\n    <p>{`A Pure Function is a function that given the same input, you will always get the same output without Side Effects`}</p>\n    <p>{`f(5) -> 10`}</p>\n    <p>{`f(6) -> 12`}</p>\n    <p>{`f(5) -> 5 Violating Pure Functions`}</p>\n    <hr></hr>\n    <h1>{`A Java Pure Function`}</h1>\n    <SyntaxHighlighter language=\"java\" style={atomDark} mdxType=\"SyntaxHighlighter\">\n  {`\n  class Calculator {\n    public static int add(int a, int b) {\n        return a + b;\n    }\n  }\n  main() {\n      int result = Calculator.add(5,2);\n      result == 7;\n  }\n  `}\n    </SyntaxHighlighter>\n    <hr></hr>\n    <h1>{`Function Composition`}</h1>\n    <p>{`We can combine functions to make new functions`}</p>\n    <p>{`f(x) = 5x;\ng(x) = x/5;`}</p>\n    <p>{`y = f(g) == (x/5) `}{`*`}{` 5`}</p>\n    <p>{`result = y(1)`}</p>\n    <p>{`result == 5`}</p>\n    <hr></hr>\n    <SyntaxHighlighter language=\"java\" style={atomDark} mdxType=\"SyntaxHighlighter\">\n  {`\n    public int divideByFive(int a) {\n        return a / 5;\n    }\n    public int multiplyByFive(int a) {\n        return a * 5;\n    }\n    public Function compose(Func a, Func b) {\n        return (x) -> a(b(x));\n    }\n    var multiplyThenDivide = compose(divideByFive, multipleByFive);\n    multiplyThenDivide()\n  `}\n    </SyntaxHighlighter>\n    <hr></hr>\n    <p>{`We can do better then that... With the power of Currying`}</p>\n    <hr></hr>\n    <SyntaxHighlighter language=\"java\" style={atomDark} mdxType=\"SyntaxHighlighter\">\n  {`\n    public int divide(int a, int b) {\n        return a / b;\n    }\n    public int multiply(int a, int b) {\n        return a * b;\n    }\n    public Function<T, F> compose(Func<T, F> a, Func<F, T> b) {\n        return (x) -> a(b(x));\n    }\n    var multiplyByFiveThenDivideByFive = compose(divide(5), multiply(5));\n    multiplyByFiveThenDivideByFive(5)\n  `}\n    </SyntaxHighlighter>\n    <hr></hr>\n    <h1>{`Higher Order Functions`}</h1>\n    <p>{`Higer Order Functions - a function that takes in another function as a arguement.`}</p>\n    <p><em parentName=\"p\">{`compose`}</em>{` is a examply of a higher order functions`}</p>\n    <hr></hr>\n    <h2>{`Higher Order Examples (The Building Blocks of FP)`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`map`}</li>\n      <li parentName=\"ul\">{`reduce (fold)`}</li>\n      <li parentName=\"ul\">{`filter`}</li>\n    </ul>\n    <hr></hr>\n    <h2>{`Map`}</h2>\n    <p>{`Returns a new list, turning every element inside of list into a type B using the function provided`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// [A] => [B]\nList<B> map(Function<A, B> func, List<A> list);\n\nlistOfStrings = map(a -> a.toString(), listOfInts);\n`}</code></pre>\n    <hr></hr>\n    <h2>{`Filter`}</h2>\n    <p>{`Returns a new list of A, that is a list of all elements that returned true from the passed in function`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// [A] => [A]\nList<A> filter(Function<A, Boolean> func, List<A> list)\n\nonly1s = filter(a -> a == 1, listOfInts);\n`}</code></pre>\n    <hr></hr>\n    <h2>{`Reduce (also known as fold)`}</h2>\n    <p>{`Returns a value,`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// [A] => B\nB reduce(A identityValue, BiFunction<A, B> func, List<A> list)\n\n// This version uses the two first elements of list\nB reduce(BiFunction<A, B, B> func, List<A> list)\n\nsumOfList = listOfInts.reduce(0, a -> a + b, listOfInts)\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}